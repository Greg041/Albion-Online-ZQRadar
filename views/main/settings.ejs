
<div class="container px-6 mx-auto grid">
	<div class="grid gap-6 mb-8 md:grid-cols-1 xl:grid-cols-1">
		<div class="mt-4 flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div>
				<h2 class=" text-4xl font-semibold text-gray-600 dark:text-gray-300">
					Accessibilty
				</h2>
			</div>
		</div>

    <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800" style="height: 532px;">
			<div class="flex" style="justify-content: space-between; width: calc(100% - 500px);">
        <div>
          <h4 class="text-2xl mb-4 font-semibold text-gray-600 dark:text-gray-300">
            Players
          </h4>
          <div>
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Dot size</label>
            <input 
              id="p-dot-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="10"
            />
          </div>
          <div class="mt-4">
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Name text size</label>
            <input 
              id="p-name-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="12"
            />
          </div>
          <div class="mt-4">
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Mounted text size</label>
            <input 
              id="p-mount-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="12"
            />
          </div>
          <div class="mt-4">
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Distance text size</label>
            <input 
              id="p-distance-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="12"
            />
          </div>
          <div class="mt-4">
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Health size</label>
            <input 
              id="p-health-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="60"
            />
          </div>
          <div class="mt-4">
            <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Guild text size</label>
            <input 
              id="p-guild-size"
              class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
              style="width: 50px;"
              value="12"
            />
          </div>
        </div>
        <div style="position: relative;">
          <canvas id="mapCanvasPlayers" width="500" height="500" style="position: absolute; display: inline-block;"></canvas>
          <canvas id="gridCanvasPlayers" width="500" height="500" style="position: absolute; border: 2px solid grey; display: inline-block;"></canvas>
          <canvas id="drawCanvasPlayers" width="500" height="500" style="position: absolute; display: inline-block;"></canvas>
        </div>
			</div>
		</div>

    <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
        <h4 class="text-2xl mb-4 font-semibold text-gray-600 dark:text-gray-300">
          Resources
        </h4>
        <div>
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Image size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="50"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">T & E text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Resource size text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Fish text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">ID text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
			</div>
		</div>

    <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
        <h4 class="text-2xl mb-4 font-semibold text-gray-600 dark:text-gray-300">
          Enemies
        </h4>
        <div>
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Image size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="50"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">No image dot size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="10"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">ID text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
			</div>
		</div>

    <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
        <h4 class="text-2xl mb-4 font-semibold text-gray-600 dark:text-gray-300">
          Wisp, Chest, Dungeon
        </h4>
        <div>
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Image size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="50"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">Enchant text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
        <div class="mt-4">
          <label class="mr-2 font-semibold text-gray-500 dark:text-gray-400" for="">S & D text size</label>
          <input 
            id=""
            class="text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
            style="width: 50px;"
            value="12"
          />
        </div>
			</div>
		</div>
</div>

<script>
  //#region Players
  const mapCanvasPlayers = document.getElementById("mapCanvasPlayers");
  const mapPlayersContext = mapCanvasPlayers.getContext("2d");
  mapPlayersContext.fillStyle = '#1a1c23';
  mapPlayersContext.fillRect(0, 0, mapCanvasPlayers.width, mapCanvasPlayers.height);

  const gridCanvasPlayers = document.getElementById("gridCanvasPlayers");
  const gridPlayersContext = gridCanvasPlayers.getContext("2d");
  DrawGrid(gridCanvasPlayers, gridPlayersContext);

  const drawCanvasPlayers = document.getElementById("drawCanvasPlayers");
  const drawPlayersContext = drawCanvasPlayers.getContext("2d");

  function RefreshPlayersCanvas(dotRadius, healthBarWidth, mountTextSize, nameTextSize, guildTextSize, distanceTextSize)
  {
    drawPlayersContext.clearRect(0, 0, drawCanvasPlayers.width, drawCanvasPlayers.height);

    const midX = drawCanvasPlayers.width / 2;
    const midY = drawCanvasPlayers.height / 2;

    // Our Player
    DrawFilledCircle(drawPlayersContext, midX, midY, 10, "blue");



    let pSpace = 0;
    const hbP = 1; // health bar percentage
    const hbPercentSize = 7/60;
    const hbHeight = healthBarWidth * hbPercentSize;


    // Player 1
    let pX = midX + 50, pY = midY + 50;
    DrawFilledCircle(drawPlayersContext, pX, pY, dotRadius, "red"); 

    this.DrawText(pX, pY, "M", drawPlayersContext, `${mountTextSize}px`, "white"); // Mounted

    pSpace += dotRadius + 5;
    let tHeight = CalculateTextHeight(drawPlayersContext, "Nickname", `${nameTextSize}px`);
    pSpace += tHeight/2;
    this.DrawText(pX, pY + pSpace, "Nickname", drawPlayersContext, `${nameTextSize}px`, "white"); // Name


    tHeight = CalculateTextHeight(drawPlayersContext, "80m", `${distanceTextSize}px`);
    this.DrawText(pX, pY - dotRadius-5-tHeight/2, "80m", drawPlayersContext, `${distanceTextSize}px`, "white"); // Distance

    pSpace += hbHeight/2 + 8.5;
    drawPlayersContext.fillStyle = "#121317";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth, hbHeight);
    drawPlayersContext.fillStyle = "red";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth * hbP, hbHeight);

    pSpace += 5 + hbHeight/2;
    tHeight = CalculateTextHeight(drawPlayersContext, "Guild Name", `${guildTextSize}px`);
    this.DrawText(pX, pY + pSpace + tHeight/2, "Guild Name", drawPlayersContext, `${guildTextSize}px`, "white");



    // Player 2
    pSpace = 0;
    pX = midX + 85, pY = midY - 50;
    DrawFilledCircle(drawPlayersContext, pX, pY, dotRadius, "red"); 

    this.DrawText(pX, pY, "M", drawPlayersContext, `${mountTextSize}px`, "white"); // Mounted

    pSpace += dotRadius + 5;
    tHeight = CalculateTextHeight(drawPlayersContext, "Nickname", `${nameTextSize}px`);
    pSpace += tHeight/2;
    this.DrawText(pX, pY + pSpace, "Nickname", drawPlayersContext, `${nameTextSize}px`, "white"); // Name


    tHeight = CalculateTextHeight(drawPlayersContext, "80m", `${distanceTextSize}px`);
    this.DrawText(pX, pY - dotRadius-5-tHeight/2, "80m", drawPlayersContext, `${distanceTextSize}px`, "white"); // Distance

    pSpace += hbHeight/2 + 8.5;
    drawPlayersContext.fillStyle = "#121317";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth, hbHeight);
    drawPlayersContext.fillStyle = "red";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth * hbP, hbHeight);

    pSpace += 5 + hbHeight/2;
    tHeight = CalculateTextHeight(drawPlayersContext, "Guild Name", `${guildTextSize}px`);
    this.DrawText(pX, pY + pSpace + tHeight/2, "Guild Name", drawPlayersContext, `${guildTextSize}px`, "white");


    // Player 3
    pSpace = 0;
    pX = midX - 85, pY = midY + 75;
    DrawFilledCircle(drawPlayersContext, pX, pY, dotRadius, "red"); 

    this.DrawText(pX, pY, "M", drawPlayersContext, `${mountTextSize}px`, "white"); // Mounted

    pSpace += dotRadius + 5;
    tHeight = CalculateTextHeight(drawPlayersContext, "Nickname", `${nameTextSize}px`);
    pSpace += tHeight/2;
    this.DrawText(pX, pY + pSpace, "Nickname", drawPlayersContext, `${nameTextSize}px`, "white"); // Name


    tHeight = CalculateTextHeight(drawPlayersContext, "80m", `${distanceTextSize}px`);
    this.DrawText(pX, pY - dotRadius-5-tHeight/2, "80m", drawPlayersContext, `${distanceTextSize}px`, "white"); // Distance

    pSpace += hbHeight/2 + 8.5;
    drawPlayersContext.fillStyle = "#121317";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth, hbHeight);
    drawPlayersContext.fillStyle = "red";
    drawPlayersContext.fillRect(pX - healthBarWidth/2, pY - hbHeight/2 + pSpace, healthBarWidth * hbP, hbHeight);

    pSpace += 5 + hbHeight/2;
    tHeight = CalculateTextHeight(drawPlayersContext, "Guild Name", `${guildTextSize}px`);
    this.DrawText(pX, pY + pSpace + tHeight/2, "Guild Name", drawPlayersContext, `${guildTextSize}px`, "white");
  }

  // Set default values with localStorage
  let pDotSize = 10;
  let pHealthBarWidth = 60;
  let pMountTextSize = 12;
  let pNameTextSize = 12;
  let pGuildTextSize = 12;
  let pDistanceTextSize = 12;

  RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  
  const pDotTextSize = document.getElementById("p-dot-size");
  pDotTextSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 10;

    pDotSize = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  const pHealthBarSize = document.getElementById("p-health-size");
  pHealthBarSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 60;

      pHealthBarWidth = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  const pMountSize = document.getElementById("p-mount-size");
  pMountSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 12;

      pMountTextSize = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  const pNameSize = document.getElementById("p-name-size");
  pNameSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 12;

      pNameTextSize = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  const pGuildSize = document.getElementById("p-guild-size");
  pGuildSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 12;

      pGuildTextSize = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  const pDistanceSize = document.getElementById("p-distance-size");
  pDistanceSize.addEventListener("input", (e) => {
    let val = e.target.value;
    val = parseInt(val);

    if (!val || val <= 0)
      val = 12;

      pDistanceTextSize = val;

    RefreshPlayersCanvas(pDotSize, pHealthBarWidth, pMountTextSize, pNameTextSize, pGuildTextSize, pDistanceTextSize);
  });

  //#endregion


  function DrawGrid(canvas, context)
  {
    var bw = canvas.width;
    var bh = canvas.height;

    var p = 0;
    let totalSpace = canvas.height / 10;

    for (var x = 0; x <= bw; x += totalSpace)
    {
      context.moveTo(0.5 + x + p, p);
      context.lineTo(0.5 + x + p, bh + p);
    }

    for (var x = 0; x <= bh; x += 50)
    {
      context.moveTo(p, 0.5 + x + p);
      context.lineTo(bw + p, 0.5 + x + p);
    }

    context.strokeStyle = "grey";
    context.stroke();
  }

  function DrawFilledCircle(context, x, y, radius, color)
  {
    context.beginPath();
    context.arc(x , y , radius, 0, 2 * Math.PI);
    context.fillStyle = color;
    context.fill();
  }

  function DrawText(x, y, text, ctx, size="12px", color="white", font="Arial")
  {
    ctx.font = size + " " + this.fontFamily;
    ctx.fillStyle = color;

    const tS = ctx.measureText(text);
    const width = tS.width;
    const height = tS.actualBoundingBoxAscent + tS.actualBoundingBoxDescent;

    ctx.fillText(text, x - width/2, y + height/2);
  }

  function CalculateTextSize(ctx, text, size="12px", font="Arial")
  {
    ctx.font = size + " " + this.fontFamily;

    return ctx.measureText(text);
  }

  function CalculateTextHeight(ctx, text, size="12px", font="Arial")
  {
    const tS = CalculateTextSize(ctx, text, size, font);
    const height = tS.actualBoundingBoxAscent + tS.actualBoundingBoxDescent;

    return height;
  }
</script>